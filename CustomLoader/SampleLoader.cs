using System;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Security.Policy;
using System.Threading;

namespace CustomLoader
{
    public static class SampleLoader
    {
        public static int DumpCount { get; private set; } = 0;
        public static string SavePath { get; private set; } = Environment.CurrentDirectory;

        static SampleLoader()
        {
            SubscribeToEvents();
        }

        public static void LoadAndLaunchSample(string samplePath)
        {
            Assembly sampleAssembly = LoadSampleAssembly(samplePath);

            try
            {
                InvokeEntryPoint(sampleAssembly);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error launching sample: {ex}");
            }
        }

        private static void SubscribeToEvents()
        {
            AppDomain.CurrentDomain.AssemblyLoad += AssemblyLoadedHandler;
        }

        private static Assembly LoadSampleAssembly(string samplePath)
        {
            return Assembly.LoadFrom(samplePath);
        }

        private static void InvokeEntryPoint(Assembly sampleAssembly)
        {
            MethodInfo entryPoint = sampleAssembly.EntryPoint;

            if (entryPoint != null)
            {
                try
                {
                    object[] parameters = CreateDefaultParameters(entryPoint);

                    entryPoint.Invoke(null, parameters);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error invoking entry point: {ex}");
                }
            }
            else
            {
                Console.WriteLine("Entry point not found.");
            }
        }

        private static object[] CreateDefaultParameters(MethodInfo entryPoint)
        {
            ParameterInfo[] parametersInfo = entryPoint.GetParameters();
            object[] parameters = new object[parametersInfo.Length];

            for (int i = 0; i < parametersInfo.Length; i++)
            {
                parameters[i] = parametersInfo[i].ParameterType.IsValueType
                    ? Activator.CreateInstance(parametersInfo[i].ParameterType)
                    : null;
            }

            return parameters;
        }

        private static void AssemblyLoadedHandler(object sender, AssemblyLoadEventArgs args)
        {
            Console.WriteLine($"[+] Assembly loaded: {args.LoadedAssembly.FullName}");

            if (args.LoadedAssembly.FullName.StartsWith("System"))
            {
                Console.WriteLine("[*] Not saving the System assembly");
                Console.WriteLine("");
                return;
            }

            ResourceWriter.WriteResourcesToFile(args.LoadedAssembly, "Resources");

            SaveAssembly(args.LoadedAssembly);
        }

        private static void SaveAssembly(Assembly assembly)
        {
            var hash = new Hash(assembly);
            var dllAsArray = (byte[])hash.GetType()
                .GetMethod("GetRawData", BindingFlags.Instance | BindingFlags.NonPublic)
                .Invoke(hash, new object[0]);

            Console.WriteLine(dllAsArray.ToString());
            File.WriteAllBytes($"{SavePath}\\dump{DumpCount++}", dllAsArray);

            Console.WriteLine("[+] Saved the assembly");
            Console.WriteLine();
            Thread.Sleep(2000);
        }


    }
}
