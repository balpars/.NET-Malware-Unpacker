using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;

// These functions are for future updates
// They aren't called in main program

namespace CustomLoader
{
    public static class AssemblyInfoPrinter
    {
        private static void PrintAssemblyResources(Assembly assembly)
        {
            string[] resourceNames = assembly.GetManifestResourceNames();
            if (resourceNames.Length > 0)
            {
                Console.WriteLine("[+] Embedded Resources:");
                foreach (var resourceName in resourceNames)
                {
                    Console.WriteLine(resourceName);
                }
            }
            else
            {
                Console.WriteLine("No embedded resources found.");
            }
        }

        public static string GetCurrentProcessName()
        {
            Process currentProcess = Process.GetCurrentProcess();
            return currentProcess.ProcessName;
        }
        private static void PrintAssemblyMemoryAddress(Assembly assembly)
        {
            IntPtr hModuleBase = Marshal.GetHINSTANCE(assembly.GetModules()[0]);
            Console.WriteLine($"Memory Address Start: 0x{hModuleBase.ToInt64():X}");
            int size = GetAssemblySize(hModuleBase);
            Console.WriteLine($"Size is {size / 8} KB");
        }
        private static int GetAssemblySize(IntPtr hModule)
        {
            // Assuming the image size is stored at offset 0x50 in the PE header
            int peHeaderOffset = Marshal.ReadInt32(new IntPtr(hModule.ToInt64() + 0x3C));
            int imageSizeOffset = peHeaderOffset + 0x50;
            int imageSize = Marshal.ReadInt32(new IntPtr(hModule.ToInt64() + imageSizeOffset));
            return imageSize;
        }

    }
}
